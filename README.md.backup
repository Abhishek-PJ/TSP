# Trendy Stocks Predictor

A full-stack app that surfaces intraday stock candidates using numeric filters and AI-powered news sentiment analysis, with a modern, responsive UI.

- Frontend: React (Vite) + Tailwind CSS
- Backend: Node.js + Express
- Agent: Python (Agno) + OpenAI for sentiment analysis
- Cache: Redis (with in-memory fallback)
- Data: NSE feed and news (can be swapped for real providers)

## Prerequisites
- Windows PowerShell (or any terminal)
- Node.js 20.19+ recommended
- Python 3.11+ (for Agno agent service)
- Redis (optional, uses in-memory cache if not available)

## Quick Start (with Agno AI Sentiment)
Open three terminals for the full experience with AI-powered sentiment analysis.

### 1) Agent Service (Python + Agno)
```bash
# Terminal 1
cd agent
pip install -r requirements.txt

# Create .env file from example and add your OpenAI API key
cp .env.example .env
# Edit .env and set OPENAI_API_KEY=your-key-here

# Start the agent service
uvicorn server:app --reload --port 8000
# Agent API on http://localhost:8000
```

### 2) Backend (Node.js)
```bash
# Terminal 2
cd backend
npm install

# Create .env file if needed
# Add: AGNO_ENABLED=true, AGNO_URL=http://localhost:8000

npm run dev
# API on http://localhost:4000
```

### 3) Frontend (React)
```bash
# Terminal 3
cd frontend
npm install
npm run dev
# App on http://localhost:5173
```

## Quick Start (without Agno - VADER sentiment fallback)
If you don't want to run the Agno service, the app automatically falls back to VADER sentiment analysis.

```bash
# Terminal 1: Backend with Agno disabled
cd backend
# Set AGNO_ENABLED=false in .env or:
$env:AGNO_ENABLED="false"
npm run dev

# Terminal 2: Frontend
cd frontend
npm run dev
```

## Configuration

### Agent Service (`agent/.env`)
```env
OPENAI_API_KEY=sk-your-key-here
OPENAI_MODEL=gpt-4o-mini
REDIS_URL=redis://localhost:6379/0
```

### Backend (`backend/.env`)
```env
PORT=4000
- `GET /api/candidates`
  - Snapshot filtered by numeric rules
  
- `GET /api/news/:symbol`
  - Recent articles for `:symbol` (cached 10m during market; cached-only when market closed)
  
- `GET /api/picks/today`
  - **Enhanced with AI sentiment analysis**
  - Returns candidates with `sentiment_score`, `sentiment_label`, `reason`, `recommendation`
  - During market hours: live computation with Agno sentiment
  - Off hours: serves cached last session results
  - Automatic fallback to VADER if Agno unavailable
  
- `GET /api/ohlc/:symbol`
  - Returns OHLC candles for charts
  - Query params: `interval` (e.g., 1m, 5m, 15m, 1h, 1d), `range` (e.g., 1d,5d,1mo,3mo,6mo,1y,5y)

### Agent Service (Python - Port 8000)
- `POST /picks`
  - Accepts `{ symbols: [], news: { SYMBOL: [articles...] } }`
  - Returns `{ data: [{ symbol, sentiment_score, sentiment_label, reason }], ts }`
- `GET /health`
  - Returns `{ agent: "ok", redis: "connected/disconnected" }`

## Libraries & Packages

### Agent Service (Python + Agno)
- agno - AI agent framework
- fastapi - Web framework
- uvicorn - ASGI server
- redis - Caching
- python-dotenv - Environment variables
- openai - LLM integration

### Backend (Node + Express)
- express: ^4.19.2
- cors: ^2.8.5
- dotenv: ^16.4.5
- node-fetch: ^3.3.2 - HTTP client for Agno integration
- node-cron: ^4.2.1
- fast-xml-parser: ^5.2.5
- ioredis: ^5.7.0
- vader-sentiment: ^1.1.3 - Fallback sentiment
- nodemon: ^3.1.0 (dev)

### Frontend (React + Vite)
- react: ^19.1.1
- react-dom: ^19.1.1
- react-router-dom: ^7.8.2
- lightweight-charts: ^4.2.3
- tailwindcss: ^4.1.13
- vite: ^7.1.2
- @vitejs/plugin-react: ^5.0.0

## Project Structure
```
TSP/
  agent/                        # NEW: Python Agno service
    server.py                   # FastAPI app with Agno agent
    requirements.txt            # Python dependencies
    .env.example                # Environment template
    Dockerfile                  # Container definition
    README.md                   # Agent-specific docs
  backend/
    src/
      index.js                  # Main server (updated with Agno)
      modules/
        marketFeed.js           # NSE data feed
        filters.js              # Numeric filters
        newsFetcher.js          # Multi-source news
        sentimentService.js     # VADER fallback
        recommendationEngine.js # NEW: Agno integration
        agnoClient.js           # NEW: Agno HTTP client
        cache.js                # Redis cache
    package.json
    .env.example                # NEW: With Agno config
    Dockerfile                  # NEW: Container definition
  frontend/
    src/
      App.jsx
      main.jsx
      components/
        Modal.jsx
        CandlestickChart.jsx
      pages/
        SymbolDetails.jsx
      index.css
    vite.config.js
    package.json
  docker-compose.yml            # NEW: Full stack orchestration
  test-agno-integration.ps1     # NEW: PowerShell test script
  test-agno-integration.sh      # NEW: Bash test script
```
